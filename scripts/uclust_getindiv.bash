#!/bin/bash
#
#   Find singleton OTUs in a readmap.uc file and output a listing to
#   standard output
#
#	(C) Jos√© R. Valverde, EMBnet/CNB, CSIC. 2012
#
#	Licensed under EU-GPL
#
function usage {
    cat <<END

    Usage: $0
    Usage: $0 readmap.uc
    Usage: $0 -i readmap.uc
    Usage: $0 --input readmap.uc
    Usage: $0 -h/--help     	    	(print this help)
    
    	readmap.uc -- the name of the 'readmap.uc' file generated by
	    	    Otupipe (directly or through uclust_seqs.cmd). By
		    default it is set to 'readmap.uc'

    Example: $0 readmap.uc

END
}

file=""

# Parse the command line
# ----------------------
# Note that we use `"$@"' to let each command-line parameter expand to a 
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=`getopt -o hi:m: \
     --long help,input:,min-cluster-size: \
     -n "$0" -- "$@"`

# an invalid option was given
if [ $? != 0 ] ; then usage >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-h|--help) 
		    usage ; shift ;;
		-i|--input) 
		    #echo "INPUT FILE \`$2'" 
		    file=$2 ; shift 2 ;;
		--) shift ; break ;;
		*) echo "Internal error!" >&2 ; usage ; exit 1 ;;
	esac
done

if [ "$file" == "" ] ; then
    # get readmap.uc file name
    file=${1:-"readmap.uc"}
fi

# get file directory
#	if $1 undefined this will return "."
d=`dirname "$file"`

f="${file##*/}"
ext="${file##*.}"
n="${f%.*}"
# at this point we should have
#   f=readmap.uc n=readmap ext=uc
echo "$0 $d/$f"
#exit

readmap_uc=$f

cd $d

if [ ! -e $readmap_uc ] ; then
   echo "$readmap_uc does not exist"
   exit
fi



notus=`grep ">OTU_" otus.fa | tail -n 1 | cut -d_ -f2`
# sanity check
n=`grep -c "^>" otus.fa`
if [ $notus -ne $n ] ; then echo "Warning, something's a-miss in otus.fa" 1>&2 ; fi

#echo $notus
# we use the "obsoleted" seq command because {1..$var} does not
#	work in some of the systems we use.
for i in $(seq 1 1 $notus) ; do 
	# this is very inefficient: we run twice over
	# the file for each OTU, but is fast enough for us
 	n=`grep -c "OTU_$i$" readmap.uc` 
	if [ $n -eq 1 ] ; then 
		#echo "$i; $n" 
		grep "OTU_$i$" readmap.uc | cut -d '	' -f 9
	fi
done
